# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::uploaded-products-bucket"
    - Effect: "Allow"
      Action: 
        - "s3:*"
      Resource:
        - "arn:aws:s3:::uploaded-products-bucket/*"
    - Effect: "Allow"
      Action: 
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [SQSQueue, Arn]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: SNSTopic
  
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
    PG_HOST: ${file(./config.json):PG_HOST}
    PG_PORT: ${file(./config.json):PG_PORT}
    PG_DATABASE: ${file(./config.json):PG_DATABASE}
    PG_USERNAME: ${file(./config.json):PG_USERNAME}
    PG_PASSWORD: ${file(./config.json):PG_PASSWORD}
    # BUCKET:
    #   Ref: Bucket


resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: parsed-products-queue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: parsed-products-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: korbutyura@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    # Bucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: uploaded-products-bucket
    #     existing: true


# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  importProductsFile:
    handler: handlers/index.importProductsFile
    events:     
      - http:
          method: get
          path: /import
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  importFileParser: 
    handler: handlers/index.importFileParser
    events:
      - s3:
          bucket: uploaded-products-bucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess: 
    handler: handlers/index.catalogBatchProcess
    events:
      - sqs: 
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
